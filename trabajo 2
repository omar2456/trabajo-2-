import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;


public class DataStructureSelectionActivity  {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_data_structure_selection);

        // Referencias a los botones en el diseño XML
        Button simpleListButton = findViewById(R.id.simpleListButton);
        Button doublyLinkedListButton = findViewById(R.id.doublyLinkedListButton);
        Button circularListButton = findViewById(R.id.circularListButton);
        Button sortingMethodsButton = findViewById(R.id.sortingMethodsButton);

        // Lógica de manejo de clics para cada botón
        simpleListButton.setOnClickListener(new View.OnClickListener() {
            @Override
            
	public class ListActivity  {

   	 private Node head = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_singly_linked_list);

        final EditText inputEditText = findViewById(R.id.inputEditText);
        final TextView outputTextView = findViewById(R.id.outputTextView);
        Button addButton = findViewById(R.id.addButton);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Obtener el valor del EditText
                String inputValue = inputEditText.getText().toString();

                if (!inputValue.isEmpty()) {
                    // Convertir el valor a entero
                    int value = Integer.parseInt(inputValue);

                    // Crear un nuevo nodo con el valor
                    Node newNode = new Node(value);

                    // Agregar el nuevo nodo al inicio de la lista
                    newNode.next = head;
                    head = newNode;

                    // Limpiar el EditText
                    inputEditText.setText("");

                    // Actualizar la salida en la interfaz de usuario
                    updateOutput(outputTextView);
                }
            }
        });
    }

    private void updateOutput(TextView outputTextView) {
        // Construir una cadena con los datos de la lista
        StringBuilder result = new StringBuilder();
        Node temp = head;
        while (temp != null) {
            result.append(temp.data).append("\n");
            temp = temp.next;
        }

        // Mostrar la cadena en el TextView
        outputTextView.setText(result.toString());
    }
}

            }
        });

        doublyLinkedListButton.setOnClickListener(new View.OnClickListener() {
            @Override
            

public class ListActivity  {

    private Node head = null;
    private Node tail = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_doubly_linked_list);

        final EditText inputEditText = findViewById(R.id.inputEditText);
        final TextView outputTextView = findViewById(R.id.outputTextView);
        Button addButton = findViewById(R.id.addButton);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Obtener el valor del EditText
                String inputValue = inputEditText.getText().toString();

                if (!inputValue.isEmpty()) {
                    // Convertir el valor a entero
                    int value = Integer.parseInt(inputValue);

                    // Crear un nuevo nodo con el valor
                    Node newNode = new Node(value);

                    // Agregar el nuevo nodo a la lista doblemente ligada
                    if (head == null) {
                        head = newNode;
                        tail = newNode;
                    } else {
                        newNode.prev = tail;
                        tail.next = newNode;
                        tail = newNode;
                    }

                    // Limpiar el EditText
                    inputEditText.setText("");

                    // Actualizar la salida en la interfaz de usuario
                    updateOutput(outputTextView);
                }
            }
        });
    }

    private void updateOutput(TextView outputTextView) {
        // Construir una cadena con los datos de la lista doblemente ligada
        StringBuilder result = new StringBuilder();
        Node temp = head;
        while (temp != null) {
            result.append(temp.data).append("\n");
            temp = temp.next;
        }

        // Mostrar la cadena en el TextView
        outputTextView.setText(result.toString());
    }
}

		}
        });

        circularListButton.setOnClickListener(new View.OnClickListener() {
            

public class ListActivity  {

    private Node head = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_singly_linked_list);

        final EditText inputEditText = findViewById(R.id.inputEditText);
        final TextView outputTextView = findViewById(R.id.outputTextView);
        Button addButton = findViewById(R.id.addButton);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Obtener el valor del EditText
                String inputValue = inputEditText.getText().toString();

                if (!inputValue.isEmpty()) {
                    // Convertir el valor a entero
                    int value = Integer.parseInt(inputValue);

                    // Crear un nuevo nodo con el valor
                    Node newNode = new Node(value);

                    // Agregar el nuevo nodo al inicio de la lista
                    newNode.next = head;
                    head = newNode;

                    // Limpiar el EditText
                    inputEditText.setText("");

                    // Actualizar la salida en la interfaz de usuario
                    updateOutput(outputTextView);
                }
            }
        });
    }

    private void updateOutput(TextView outputTextView) {
        // Construir una cadena con los datos de la lista
        StringBuilder result = new StringBuilder();
        Node temp = head;
        while (temp != null) {
            result.append(temp.data).append("\n");
            temp = temp.next;
        }

        // Mostrar la cadena en el TextView
        outputTextView.setText(result.toString());
    }
}

            }
        });

        sortingMethodsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Implementar lógica para Métodos de Ordenamiento
                Intent intent = new Intent(DataStructureSelectionActivity.this, SortingMethodsActivity.class);
                startActivity(intent);
            }
        });
    }
}
---------------------------------------------------------------------------------------------------
xml 
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
   
    <!-- EditText para ingresar datos -->
    <EditText
        android:id="@+id/inputEditText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter a number" />

    <!-- Botón para agregar elementos a la lista -->
    <Button
        android:id="@+id/addButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Add to List" />

    <!-- TextView para mostrar la salida de la lista -->
    <TextView
        android:id="@+id/outputTextView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        
        android:text="List Output will appear here" />
</LinearLayout>
